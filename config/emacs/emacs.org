#+title Emacs Configuration

* Package

  #+begin_src emacs-lisp

    ;; Initialize package sources
    (require 'package)

    (setq package-archives '(("melpa" . "https://melpa.org/packages/")
			     ("org" . "https://orgmode.org/elpa/")
			     ("elpa" . "https://elpa.gnu.org/packages/")))

    (package-initialize)
    (unless package-archive-contents
      (package-refresh-contents))

    ;; Initialize use-package on non-Linux platforms
    (unless (package-installed-p 'use-package)
      (package-install 'use-package))

    (require 'use-package)
    (setq use-package-always-ensure t)
  #+end_src

* Basic UI Configuration

  #+begin_src emacs-lisp
    (set-frame-parameter (selected-frame) 'alpha '(100 . 100))
    (add-to-list 'default-frame-alist '(alpha . (100 . 100)))

    (setq inhibit-startup-message t)

    (scroll-bar-mode -1)           ; Disable visible scroll
    (tool-bar-mode -1)             ; Disable the toolbar
    (tooltip-mode -1)              ; Disable tooltips
    (set-fringe-mode 10)           ; Give some breathing room

    (menu-bar-mode -1)             ; Disable the menu bar

    ;; Set up visible bell
    (setq visible-bell t)

    (set-mouse-color "GhostWhite")
  #+end_src
  
** Line Numbers
#+begin_src emacs-lisp
  (column-number-mode)
  (global-display-line-numbers-mode t)
  (setq display-line-numbers-type 'relative)

  ;; Disable line numbers for some modes
  (dolist (mode '(org-mode-hook
                  term-mode-hook
                  eshell-mode-hook
                  shell-mode-hook
                  neotree-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+end_src

** Font Configuration

   #+begin_src emacs-lisp
     (set-face-attribute 'default nil
                         :family "Hasklig"
                         :height 100
                         :weight 'normal
                         :width 'normal)

     (use-package hasklig-mode
       :hook (haskell-mode prog-mode))
   #+end_src

*** Emoji
#+begin_src emacs-lisp
  (use-package emojify
    :hook (after-init . global-emojify-mode))
#+end_src

** Themes

   #+begin_src emacs-lisp
     (use-package doom-themes
       :ensure t
       :config
       (setq doom-themes-enable-bold t
	     doom-themes-enable-italic t)
       (load-theme 'doom-moonlight t)

       (doom-themes-visual-bell-config)
       (doom-themes-org-config))
   #+end_src

** Neotree
#+begin_src emacs-lisp
      (use-package neotree
        :config
        (setq neo-theme 'ascii))
#+end_src

* Keybinding

** Custom

   #+begin_src emacs-lisp
     ;; Make ESC quit prompts
     (global-set-key (kbd "<escape>") 'keyboard-escape-quit)

     ;; Toggle neotree panel
     (global-set-key (kbd "<f5>") 'neotree-toggle)
   #+end_src
   
** Ivy and Counsel

   #+begin_src emacs-lisp
     (use-package ivy
       :diminish
       :bind (("C-s" . swiper)
	      :map ivy-minibuffer-map
	      ("TAB" . ivy-alt-done)
	      ("C-l" . ivy-alt-done)
	      ("C-j" . ivy-next-line)
	      ("C-k" . ivy-previous-line)
	      :map ivy-switch-buffer-map
	      ("C-k" . ivy-previous-line)
	      ("C-l" . ivy-done)
	      ("C-d" . ivy-switch-buffer-kill)
	      :map ivy-reverse-i-search-map
	      ("C-k" . ivy-previous-line)
	      ("C-d" . ivy-reverse-i-search-kill))
       :config
       (ivy-mode 1))

     (use-package ivy-rich
       :init
       (ivy-rich-mode 1))

     (use-package doom-modeline
       :ensure t
       :init (doom-modeline-mode 1)
       :custom ((doom-modeline-height 15)))

     (use-package which-key
       :init (which-key-mode)
       :diminish which-key-mode
       :config
       (setq which-key-idle-delay 0.3))

     (use-package counsel
       :bind (("M-x" . counsel-M-x)
	      ("C-x b" . counsel-ibuffer)
	      ("C-x C-f" . counsel-find-file)
	      :map minibuffer-local-map
	      ("C-r" . 'counsel-minibuffer-history)))
   #+end_src

** Evil and General

   #+begin_src emacs-lisp
     (use-package general
       :after evil
       :config
       (general-create-definer tulkdan/leader-keys
         :states '(normal insert visual emacs)
         :prefix "SPC"
         :global-prefix "C-SPC")
       (tulkdan/leader-keys
        "g" 'magit-status))

     (use-package evil
       :init
       (setq evil-want-integration t)
       (setq evil-want-keybinding nil)
       (setq evil-want-C-u-scroll t)
       (setq evil-want-C-i-jump nil)
       :config
       (evil-mode 1)

       (evil-global-set-key 'motion "j" 'evil-next-visual-line)
       (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

       (evil-set-initial-state 'messages-buffer-mode 'normal)
       (evil-set-initial-state 'dashboard-mode 'normal))

     (use-package evil-collection
       :after evil
       :config
       (evil-collection-init))
   #+end_src

* Development

** EditorConfig
   #+begin_src emacs-lisp
     (use-package editorconfig
       :ensure t
       :config
       (editorconfig-mode 1))
   #+end_src

** Magit

   #+begin_src emacs-lisp
     (use-package magit
       :custom
       (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))
   #+end_src

** Projectile

   #+begin_src emacs-lisp
     (use-package projectile
       :diminish projectile-mode
       :config (projectile-mode)
       :custom ((projectile-completion-system 'ivy))
       :bind-keymap
       ("C-c p" . projectile-command-map)
       :init
       (setq projectile-switch-project-action #'projectile-dired))

     (use-package counsel-projectile
       :after projectile
       :config (counsel-projectile-mode))
   #+end_src

** LSP
   #+begin_src emacs-lisp
     (defun tulkdan/lsp-mode-setup ()
       (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
       (lsp-headerline-breadcrumb-mode))

     (use-package lsp-mode
       :commands (lsp lsp-deferred)
       :hook (lsp-mode . tulkdan/lsp-mode-setup) 
       :init
       (setq lsp-keymap-prefix "C-c l")
       :custom
       (lsp-rust-analyzer-cargo-watch-command "clippy")
       (lsp-rust-analyzer-server-display-inlay-hints t)
       (lsp-eldoc-render-all t)
       :config
       (lsp-enable-which-key-integration t))
   #+end_src
*** lsp-ui
#+begin_src emacs-lisp
  (use-package lsp-ui
    :hook (lsp-mode . lsp-ui-mode)
    :custom
    (lsp-ui-doc-position 'bottom))
#+end_src

*** lsp-ivy 
#+begin_src emacs-lisp
  (use-package lsp-ivy)
#+end_src
   
** Company (code completion)
   #+begin_src emacs-lisp
     (use-package company
       :after lsp-mode
       :hook (lsp-mode . company-mode)
       :custom
       (company-idle-delay 0.0)
       (company-minimum-prefix-length 1)
       :bind
       (:map company-active-map
             ("<tab>" . company-complete-selection))
       (:map lsp-mode-map
             ("<tab>" . company-indent-or-complete-common)))
   #+end_src

** Flycheck (Inline Errors)
   #+begin_src emacs-lisp
     (use-package flycheck
       :ensure t
       :init (global-flycheck-mode)
       :config
       (flycheck-add-mode 'javascript-eslint 'web-mode))

     (setq-default flycheck-disabled-checkers
                   (append flycheck-disabled-checkers '(javascript-jshint)))

     ;; use local eslint from node_modules before global
     ;; http://emacs.stackexchange.com/questions/21205/flycheck-with-file-relative-eslint-executable
     (defun tulkdan/use-eslint-from-node-modules ()
       (let* ((root (locate-dominating-file
                     (or (buffer-file-name) default-directory)
                     "node_modules"))
              (eslint (and root
                           (expand-file-name "node_modules/eslint/bin/eslint.js"
                                             root))))
         (when (and eslint (file-executable-p eslint))
           (setq-local flycheck-javascript-eslint-executable eslint))))
     (add-hook 'flycheck-mode-hook #'tulkdan/use-eslint-from-node-modules)
   #+end_src

** Languages
*** Rust
   #+begin_src emacs-lisp
     (use-package rustic
       :ensure
       :bind (:map rustic-mode-map
                   ("M-j" . lsp-ui-imenu)
                   ("M-?" . lsp-find-references)
                   ("C-c C-c l" . flycheck-list-errors)
                   ("C-c C-c a" . lsp-execute-code-action)
                   ("C-c C-c r" . lsp-rename)
                   ("C-c C-c q" . lsp-workspace-restart)
                   ("C-c C-c Q" . lsp-workspace-shutdown)
                   ("C-c C-c s" . lsp-rust-analyzer-status)))

     (setq rustic-lsp-server 'rls)
   #+end_src
*** Javascript
#+begin_src emacs-lisp
  (use-package js2-mode
    :ensure t
    :defer 20
    :config
    (add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))
    (add-hook 'js2-mode-hook #'js2-imenu-extras-mode)
    (add-hook 'js2-mode-hook
              (defun tulkdan/js-mode-setup ()
                (when (executable-find "eslint")
                  (flycheck-select-checker 'javascript-eslint)))))
#+end_src

*** Web
#+begin_src emacs-lisp
  (use-package web-mode
    :config
    (add-to-list 'auto-mode-alist '("\\.html\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.vue\\'" . web-mode)))
#+end_src

*** Typescript
#+begin_src emacs-lisp
  (use-package typescript-mode
    :mode "\\.ts\\'"
    :hook (typescript-mode . lsp-deferred))
#+end_src

* Org Mode

** Better Font Faces
   #+begin_src emacs-lisp
     (defun tulkdan/org-font-setup ()
       ;; Replace list hyphen with dot
       (font-lock-add-keywords 'org-mode
			       '(("^ *\\([-]\\) "
				  (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

       ;; Set faces for heading levels
       (dolist (face '((org-level-1 . 1.2)
		       (org-level-2 . 1.1)
		       (org-level-3 . 1.05)
		       (org-level-4 . 1.0)
		       (org-level-5 . 1.1)
		       (org-level-6 . 1.1)
		       (org-level-7 . 1.1)
		       (org-level-8 . 1.1)))
	 (set-face-attribute (car face) nil :font "Hasklig" :weight 'regular :height (cdr face)))

       ;; Ensure that anything that should be fixed-pitch in Org files appears that way
       (set-face-attribute 'org-block nil    :foreground nil :inherit 'fixed-pitch)
       (set-face-attribute 'org-table nil    :inherit 'fixed-pitch)
       (set-face-attribute 'org-formula nil  :inherit 'fixed-pitch)
       (set-face-attribute 'org-code nil     :inherit '(shadow fixed-pitch))
       (set-face-attribute 'org-table nil    :inherit '(shadow fixed-pitch))
       (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
       (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
       (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
       (set-face-attribute 'org-checkbox nil  :inherit 'fixed-pitch)
       (set-face-attribute 'line-number nil :inherit 'fixed-pitch)
       (set-face-attribute 'line-number-current-line nil :inherit 'fixed-pitch))
   #+end_src

** Basic Configuration

   #+begin_src emacs-lisp
     (defun tulkdan/org-mode-setup ()
       (org-indent-mode)
       (variable-pitch-mode 1)
       (visual-line-mode 1))

     (use-package org
       :pin org
       :commands (org-capture org-agenda)
       :hook (org-mode . tulkdan/org-mode-setup)
       :config
       (setq org-ellipsis " ▾")

       (setq org-log-done 'time)
       (setq org-log-into-drawer t)

       (setq org-agenda-files
             '("~/Modelos/OrgFiles/Tasks.org"))

       (setq org-todo-keywords
             '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d!)")
               (sequence "BACKLOG(b)" "PLAN(p)" "READY(r)" "ACTIVE(a)" "REVIEW(v)" "|" "COMPLETED(c)" "CANC(k@)")))

       (setq org-refile-targets
             '(("Archive.org" :maxlevel . 1)
               ("Tasks.org" :maxlevel . 1)))

       ;; Configure custom agenda views
       (setq org-agenda-custom-commands
             '(("d" "Dashboard"
                ((agenda "" ((org-deadline-warning-days 7)))
                 (todo "NEXT"
                       ((org-agenda-overriding-header "Next Tasks")))
                 (tags-todo "agenda/ACTIVE" ((org-agenda-overriding-header "Active Projects")))))

               ("w" "Workflow Status"
                ((todo "WAIT"
                       ((org-agenda-overriding-header "Waiting on External")
                        (org-agenda-files org-agenda-files)))
                 (todo "REVIEW"
                       ((org-agenda-overriding-header "In Review")
                        (org-agenda-files org-agenda-files)))
                 (todo "PLAN"
                       ((org-agenda-overriding-header "In Planning")
                        (org-agenda-todo-list-sublevels nil)
                        (org-agenda-files org-agenda-files)))
                 (todo "BACKLOG"
                       ((org-agenda-overriding-header "Project Backlog")
                        (org-agenda-todo-list-sublevels nil)
                        (org-agenda-files org-agenda-files)))
                 (todo "READY"
                       ((org-agenda-overriding-header "Ready for Work")
                        (org-agenda-files org-agenda-files)))
                 (todo "ACTIVE"
                       ((org-agenda-overriding-header "Active Projects")
                        (org-agenda-files org-agenda-files)))
                 (todo "COMPLETED"
                       ((org-agenda-overriding-header "Completed Projects")
                        (org-agenda-files org-agenda-files)))
                 (todo "CANC"
                       ((org-agenda-overriding-header "Cancelled Projects")
                        (org-agenda-files org-agenda-files)))))))

       (tulkdan/org-font-setup))
   #+end_src

** Nicer Heading Bullets

   #+begin_src emacs-lisp
     (use-package org-bullets
       :hook (org-mode . org-bullets-mode)
       :custom
       (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))
   #+end_src

** Center Org Buffers

   #+begin_src emacs-lisp
     (defun tulkdan/org-mode-visual-fill ()
       (setq visual-fill-column-width 100
	     visual-fill-column-center-text t)
       (visual-fill-column-mode 1))

     (use-package visual-fill-column
       :hook (org-mode . tulkdan/org-mode-visual-fill))
   #+end_src
   
** Structure Templates

   #+begin_src emacs-lisp
     ;; This is needed as of Org 9.2
     (require 'org-tempo)

     (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
     (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
     (add-to-list 'org-structure-template-alist '("py" . "src python"))
   #+end_src


